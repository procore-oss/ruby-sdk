module Procore
  # Generic / catch all error class. All other errors generated by the gem
  # inherit from this class.
  class Error < StandardError
    # Human readable error message.
    attr_reader :message

    # A Response object which contains details about the request.
    attr_reader :response

    def initialize(message, response: nil)
      @message = message
      @response = response

      super(message)
    end
  end

  # Raised when the gem cannot connect to the Procore API. Possible causes:
  # Procore is down or the network is doing something funny.
  APIConnectionError = Class.new(Error)

  # Raised when the request is attempting to access a resource the token's
  # owner does not have access to.
  AuthorizationError = Class.new(Error)

  # Raised when the request is incorrectly formated. Possible causes: missing
  # required parameters or sending a request to access a non-existent resource.
  InvalidRequestError = Class.new(Error)

  # Raised when the request 403's
  ForbiddenError = Class.new(Error)

  # Raised when the request 404's
  NotFoundError = Class.new(Error)

  # Raised whenever there is a problem with OAuth. Possible causes: required
  # credentials are missing or an access token failed to refresh.
  class OAuthError < Error
    def initialize(message, response: nil)
      @message = message

      duck_response = if response
                        OpenStruct.new(
                          code: response.status,
                          body: response.parsed.presence || response.body,
                          headers: response.headers,
                          request: OpenStruct.new(
                            options: {},
                            path: nil,
                          ),
                        )
                      end

      super(message, response: duck_response)
    end
  end

  # Raised when a token reaches it's request limit for the current time period.
  # If you are receiving this error then you are making too many requests
  # against the Procore API.
  RateLimitError = Class.new(Error)

  # Raised when a Procore endpoint returns a 500x resonse code.
  ServerError = Class.new(Error)
end
